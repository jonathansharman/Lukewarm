import Game;
import Graphics2D;
import Math;
import Random;

const FPS = 60;
const X_RES = 800;
const Y_RES = 600;

const DANCE_DOG_CHARGES_PER_SHOT = 20;

enum GameState { MENU, CAMPAIGN, DANCE_DOG }

function main() {
	window = new Game.GameWindow("LUKEWARM", FPS, X_RES, Y_RES);

	gameState = GameState.MENU;
	titleImage = Font.title.render("L U K E W A R M");
	campaignImage = Font.black.render("Campaign");
	danceDogImage = Font.black.render("Dance, Dog");
	instructionsImage = Font.black.render("WASD to move, click to shoot, F2 to restart");
	menuChoice = 0;

	programRunning = true;
	while (programRunning) {
		eventList = window.pumpEvents();
		Input.update(eventList);
		for (i = 0; i < eventList.length; i++) {
			event = eventList[i];
			if (event.type == Game.EventType.QUIT) {
				programRunning = false;
			}
		}

		if (Input.pressed(Game.KeyboardKey.F2)) {
			// Restart game.
			gameState = GameState.MENU;
		}

		switch (gameState) {
			case GameState.MENU:
				if (Input.pressed(Game.KeyboardKey.UP) || Input.pressed(Game.KeyboardKey.W)) {
					--menuChoice;
				}
				if (Input.pressed(Game.KeyboardKey.DOWN) || Input.pressed(Game.KeyboardKey.S)) {
					++menuChoice;
				}
				menuChoice %= 2;

				if (Input.pressed(Game.KeyboardKey.ENTER) || Input.pressed(Game.KeyboardKey.SPACE)) {
					switch (menuChoice) {
						case 0:
							// Campaign
							gameState = GameState.CAMPAIGN;
							env = new Environment();
							env.characters =
								[ new Character(env, new Player(), new Vec2(X_RES / 2, Y_RES / 2))
								, new Character(env, new AI(), new Vec2(X_RES / 4, Y_RES / 4))
								, new Character(env, new AI(), new Vec2(3 * X_RES / 4, Y_RES / 4))
								, new Character(env, new AI(), new Vec2(3 * X_RES / 4, 3 * Y_RES / 4))
								, new Character(env, new AI(), new Vec2(X_RES / 4, 3 * Y_RES / 4))
								];
							break;
						case 1:
							// Dance, Dog
							gameState = GameState.DANCE_DOG;
							env = new Environment();
							env.characters = [new Character(env, new Player(), new Vec2(X_RES / 2, Y_RES / 2))];
							charge = 0;
							gameOver = false;
							break;
					}
				}

				Graphics2D.Draw.fill(255, 255, 255);
				// Title
				new Drawing()
					.setImage(titleImage)
					.setPos(X_RES / 2, Y_RES / 4)
					.alignCenter()
					.alignMiddle()
					.draw();
				// Campaign
				campaignDrawing = new Drawing()
					.setImage(campaignImage)
					.setPos(X_RES / 2, Y_RES / 2)
					.alignCenter()
					.alignBottom();
				// Dance, Dog
				danceDogDrawing = new Drawing()
					.setImage(danceDogImage)
					.setPos(X_RES / 2, Y_RES / 2)
					.alignCenter()
					.alignTop();
				// Highlight current menu choice.
				switch (menuChoice) {
					case 0:
						campaignDrawing.setBgColor(Color.red(128));
						break;
					case 1:
						danceDogDrawing.setBgColor(Color.red(128));
						break;
				}
				// Draw menu options.
				campaignDrawing.draw();
				danceDogDrawing.draw();

				// Draw instructions.
				new Drawing()
					.setImage(instructionsImage)
					.setPos(X_RES / 2, 3 * Y_RES / 4)
					.alignCenter()
					.alignMiddle()
					.draw();

				break;
			case GameState.CAMPAIGN:
				// Draw environment.
				env.draw();

				// Update environment.
				env.update();

				// Draw timer.
				timeImage = Font.white.render("Time: " + Math.floor(env.totalTime));
				new Drawing()
					.setImage(timeImage)
					.setPos(0, 0)
					.setBgColor(Color.black(128))
					.draw();

				// Draw health if the player is alive.
				if (env.characters.length > 0) {
					healthImage = Font.red.render("Health: " + env.characters[0].health);
					new Drawing()
						.setImage(healthImage)
						.setPos(0, timeImage.height)
						.setBgColor(Color.black(128))
						.draw();
				}
				break;
			case GameState.DANCE_DOG:
				++charge;
				if (charge > 0) {
					charge -= DANCE_DOG_CHARGES_PER_SHOT;
					// Choose target: the player or a random point if the player is dead.
					target = env.characters.length > 0
						? env.characters[0].pos
						: new Vec2(Random.randomInt(0, X_RES), Random.randomInt(0, Y_RES))
						;
					sources =
						[ new Vec2(Random.randomInt(0, X_RES), 0)
						, new Vec2(X_RES, Random.randomInt(0, Y_RES))
						, new Vec2(Random.randomInt(0, X_RES), Y_RES)
						, new Vec2(0, Random.randomInt(0, Y_RES))
						];
					env.shoot(sources[Random.randomInt(0, sources.length)], target);
				}

				// Update environment.
				env.update();

				// Check for game over.
				if (!gameOver && env.characters.length == 0) {
					scoreImage = Font.lime.render("Score: " + Math.floor(env.totalTime));
					gameOver = true;
				}

				// Draw environment.
				env.draw();

				// Draw timer.
				timeImage = Font.white.render("Time: " + Math.floor(env.totalTime));
				new Drawing()
					.setImage(timeImage)
					.setPos(0, 0)
					.setBgColor(Color.black(128))
					.draw();

				// Draw health if the player is alive.
				if (gameOver) {
					// Draw score.
					new Drawing()
						.setImage(scoreImage)
						.setPos(0, timeImage.height)
						.setBgColor(Color.black(128))
						.draw();
				} else {
					// Draw health.
					healthImage = Font.red.render("Health: " + env.characters[0].health);
					new Drawing()
						.setImage(healthImage)
						.setPos(0, timeImage.height)
						.setBgColor(Color.black(128))
						.draw();
				}
				break;
		}

		window.clockTick();
	}
}
