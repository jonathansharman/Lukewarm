import TwoCansAlpha4;

// Interface for an agent, which controls a character.
class Player : Agent {
	field inputManager;

	constructor(inputManager) : base()
	{
		this.inputManager = inputManager;
	}

	function control(character) {
		mousePos = this.inputManager.getMousePosition();
		mousePos = new Vec2(mousePos[0], mousePos[1]);
		character.heading = mousePos.minus(character.pos).normalize();
		// TODO: Replace _mouseClickPosition hack if a better alternative is available.
		if (this.inputManager._mouseClickPosition != null && !mousePos.equals(character.pos)) {
			// Use weapon.
			if (character.weapon != null) {
				bulletPos = character.pos.plus(character.heading.times(BULLET_SPAWN_DISTANCE));
				character.weapon.use(bulletPos, mousePos);
				character.env.bulletTimeStep = MAX_BULLET_TIME_STEP;
			}
		}
		if (this.inputManager.isKeyPressedThisFrame(KeyboardKey.E) && !mousePos.equals(character.pos)) {
			character.throwWeapon();
			character.env.bulletTimeStep = MAX_BULLET_TIME_STEP;
		}
		character.vel = Vec2.zero();
		if (this.inputManager.isKeyPressed(KeyboardKey.A)) {
			--character.vel.x;
		}
		if (this.inputManager.isKeyPressed(KeyboardKey.D)) {
			++character.vel.x;
		}
		if (this.inputManager.isKeyPressed(KeyboardKey.W)) {
			--character.vel.y;
		}
		if (this.inputManager.isKeyPressed(KeyboardKey.S)) {
			++character.vel.y;
		}
		character.vel.normalize();
		character.vel = character.vel.times(CHARACTER_SPEED);
	}

	function isPlayerControlled() { return true; }
}
