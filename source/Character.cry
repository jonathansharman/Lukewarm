import Graphics2D;
import Math;

const CHARACTER_RADIUS = 15.0;
const CHARACTER_SPEED = 5.0;

// A computer- or human-controlled game character.
class Character : Body {
	field env;
	field agent;
	field heading = new Vec2(1.0, 0.0);
	field health = 3;
	field weapon;

	constructor(env, agent, pos) : base(pos, Vec2.zero(), CHARACTER_RADIUS) {
		this.env = env;
		this.agent = agent;
		this.weapon = new Pistol(this);
	}

	function update(timeStep) {
		base.update(timeStep);

		// Clamp character to boundaries.
		if (this.pos.x < this.radius) {
			this.pos.x = this.radius;
		} else if (this.pos.x > X_RES - this.radius) {
			this.pos.x = X_RES - this.radius;
		}
		if (this.pos.y < this.radius) {
			this.pos.y = this.radius;
		} else if (this.pos.y > Y_RES - this.radius) {
			this.pos.y = Y_RES - this.radius;
		}

		if (this.weapon != null) {
			this.weapon.update(timeStep);
		}

		this.agent.control(this);
	}

	function draw() {
		color = this.agent.isPlayerControlled() ? Color.black() : Color.red();
		Graphics2D.Draw.ellipse
			( Math.floor(this.pos.x - this.radius + 0.5)
			, Math.floor(this.pos.y - this.radius + 0.5)
			, 2.0 * this.radius
			, 2.0 * this.radius
			, color.r, color.g, color.b
			);

		if (this.weapon != null) {
			this.weapon.draw();
		}
	}

	// Causes the character to throw its weapon if it has one.
	function throwWeapon() {
		// Throw weapon.
		if (this.weapon != null) {
			weaponPos = this.pos.plus(this.heading.times(THROWN_WEAPON_SPAWN_DISTANCE));
			weaponVel = this.heading.times(THROWN_WEAPON_INITIAL_SPEED);
			thrownWeapon = new ThrownWeapon(this.weapon, weaponPos, weaponVel);
			this.weapon = null;
			this.env.thrownWeapons.add(thrownWeapon);
		}
	}

	// Causes the character to drop its weapon if it has one.
	function dropWeapon() {
		if (this.weapon != null) {
			direction = Util.randomUnitVector();
			weaponPos = this.pos.plus(direction.times(DROPPED_WEAPON_SPAWN_DISTANCE));
			weaponVel = direction.times(DROPPED_WEAPON_INITIAL_SPEED);
			droppedWeapon = new DroppedWeapon(this.weapon, weaponPos, weaponVel);
			this.weapon = null;
			this.env.droppedWeapons.add(droppedWeapon);
		}
	}
}
