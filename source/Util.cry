import Math;
import Random;

// Utility functions that don't fit anywhere else.
class Util {
	// Fisher-Yates shuffle a list.
	static function shuffle(list) {
		for (i = 0; i < list.length - 1; ++i) {
			j = Random.randomInt(i, list.length);
			t = list[i];
			list[i] = list[j];
			list[j] = t;
		}
	}

	// Solves ax^2 + bx + c = 0 and returns the list of real roots. The a coefficient must not be zero.
	static function getQuadraticRoots(a, b, c) {
		determinant = b ** 2 + 4 * a * c;
		if (determinant < 0.0) {
			// No roots.
			return [];
		} else if (determinant > 0.0) {
			// Two roots.
			return
				[ (-b - determinant ** 0.5) / (2.0 * a)
				, (-b + determinant ** 0.5) / (2.0 * a)
				];
		} else {
			// One root.
			return [-b / (2.0 * a)];
		}
	}

	// Returns a random angle in [0, tau].
	static function randomAngle() {
		return 2.0 * Math.PI * Random.randomFloat();
	}

	// Returns a random unit vector.
	static function randomUnitVector() {
		angle = Util.randomAngle();
		return new Vec2(Math.cos(angle), Math.sin(angle));
	}
}
